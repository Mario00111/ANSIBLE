- name: Create local download directory
  delegate_to: localhost
  ansible.builtin.file:
    path: "{{ folder_local_java }}"
    state: directory

- name: Ensure destination directory exists
  file:
    path: "{{ folder_local_java }}"
    state: directory
    mode: '0755'

# - name: Fetch latest JDK 8 URL
#   delegate_to: localhost
#   shell: |
#     curl -s https://api.github.com/repos/adoptium/temurin8-binaries/releases/latest |
#     grep browser_download_url |
#     grep -i 'jdk.*x64.*linux.*hotspot.*\.tar\.gz' |
#     head -n 1 |
#     cut -d '"' -f 4
#   register: jdk8_url
#   changed_when: false

# - name: Fetch latest JDK 21 URL
#   delegate_to: localhost
#   shell: |
#     curl -s https://api.github.com/repos/adoptium/temurin21-binaries/releases/latest |
#     grep browser_download_url |
#     grep -i 'jdk.*x64.*linux.*hotspot.*\.tar\.gz' |
#     head -n 1 |
#     cut -d '"' -f 4
#   register: jdk21_url
#   changed_when: false
  
# - name: Download JDK 8 to controller
#   get_url:
#     url: "{{ jdk8_url.stdout }}"
#     dest: "{{ folder_local_java }}/{{ jdk8_url.stdout | basename }}"
#     mode: '0644'

# - name: Download JDK 21 to controller
#   get_url:
#     url: "{{ jdk21_url.stdout }}"
#     dest: "{{ folder_local_java }}/{{ jdk21_url.stdout | basename }}"
#     mode: '0644'

# - name: Show downloaded files
#   debug:
#     msg:
#       - "Downloaded: {{ folder_local_java }}/{{ jdk8_url.stdout | basename }}"
#       - "Downloaded: {{ folder_local_java }}/{{ jdk21_url.stdout | basename }}"

- name: Create JDK install directories
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ jdk8_path }}"
    - "{{ jdk21_path }}"

- name: Copy JDK 8 to remote host
  copy:
    src: "{{ folder_local_java }}/{{ latest_jdk8_dl }}"
    dest: "/tmp/"
    mode: '0644'

- name: Copy JDK 21 to remote host
  copy:
    src: "{{ folder_local_java }}/{{ latest_jdk21_dl }}"
    dest: "/tmp/"
    mode: '0644'

- name: Extract JDK 8 to /opt/jdk8
  unarchive:
    src: "/tmp/{{ latest_jdk8_dl }}"
    dest: "{{ jdk8_path }}"
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Extract JDK 21 to /opt/jdk21
  unarchive:
    src: "/tmp/{{ latest_jdk21_dl }}"
    dest: "{{ jdk21_path }}"
    remote_src: yes
    extra_opts: [--strip-components=1]

- name: Register JDK 8 binaries with update-alternatives
  alternatives:
    name: "{{ item.name }}"
    link: "/usr/bin/{{ item.name }}"
    path: "{{ jdk8_path }}/bin/{{ item.name }}"
    priority: 1080
  loop:
    - { name: java }
    - { name: javac }
    - { name: jar }

- name: Register JDK 21 binaries with update-alternatives
  alternatives:
    name: "{{ item.name }}"
    link: "/usr/bin/{{ item.name }}"
    path: "{{ jdk21_path }}/bin/{{ item.name }}"
    priority: 1210
  loop:
    - { name: java }
    - { name: javac }
    - { name: jar }

- name: Set JDK 21 as default
  command: update-alternatives --set {{ item }} {{ jdk21_path }}/bin/{{ item }}
  loop:
    - java
    - javac
    - jar

- name: Set environment variables for Java
  copy:
    dest: /etc/profile.d/java.sh
    mode: '0755'
    content: |
      export JAVA_HOME={{ jdk21_path }}
      export PATH=$JAVA_HOME/bin:$PATH

- name: Run Java version in bash
  shell: |
    source /etc/profile
    java -version
  args:
    executable: /bin/bash
  register: java_output

- name: Show Java version
  ansible.builtin.debug:
    var: java_output.stdout_lines
